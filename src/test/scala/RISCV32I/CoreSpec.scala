package RISCV32I

import chisel3._
import chisel3.tester._
import org.scalatest._
import scala.util.Random

class CoreSpec extends FreeSpec with ChiselScalatestTester {
    "Single Cycle Core functionality" in {
        test(new Core()) { dut =>
            dut.io.start.poke(true.B)
            println("[test01] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(0.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test02] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(4.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test03] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(8.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test04] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(12.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test05] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(16.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test06] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(20.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test07] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(24.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test08] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(28.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test09] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(32.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test10] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(36.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test11] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(40.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test12] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(44.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test13] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(48.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test14] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(52.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
            dut.clock.step(1)
            println("[test15] - running instruction")
            dut.io.rf_adr.expect(1.U)
            dut.io.pc.expect(56.U)
            dut.io.mem_in.expect(0.U)
            dut.io.mem_adr.expect(12288.U)
            dut.io.rf_in.expect(12288.U)
        }
    }
}